#1
char Aclass(3,32)
Adymosim
1.4
Final state generated by Dymosim


#    Experiment parameters
double experiment(7,1)
      50                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
     100                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
 1.0000000000000000E-004   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
 2.0000000000000000E-014   # teps     Bound to check, if 2 equal time instants
 1.0000000000000000E-010   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
 9.9999999999999995E-007   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(87,33)
vehicle.chassis.g
vehicle.chassis.m
vehicle.chassis.a
vehicle.chassis.b
vehicle.chassis.Izz
vehicle.chassis.i_s
vehicle.chassis.Iw
vehicle.chassis.rw
vehicle.chassis.m_f
vehicle.chassis.m_r
vehicle.chassis.Fzf
vehicle.chassis.Fzr
vehicle.chassis.vx0
vehicle.chassis.rho
vehicle.chassis.Cd
vehicle.chassis.ac
vehicle.chassis.mu
vehicle.chassis.vy
vehicle.chassis.der(vy)
vehicle.chassis.yaw_angle
vehicle.chassis.der(yaw_angle)
vehicle.chassis.yaw_velocity
vehicle.chassis.der(yaw_velocity)
vehicle.chassis.Fx
vehicle.chassis.Fxf
vehicle.chassis.Fyr
vehicle.chassis.Fxr
vehicle.chassis.Fd
vehicle.chassis.Fg
vehicle.chassis.womega
vehicle.chassis.theta
vehicle.chassis.beta
vehicle.chassis.vx
vehicle.chassis.der(vx)
vehicle.chassis.x
vehicle.chassis.der(x)
vehicle.chassis.y
vehicle.chassis.der(y)
vehicle.chassis.Fyf
vehicle.wheel1.g
vehicle.wheel1.pi
vehicle.wheel1.rw
vehicle.wheel1.c
vehicle.wheel1.mu
vehicle.wheel1.vx0
vehicle.wheel1.I_tyre
vehicle.wheel1.f_r
vehicle.wheel1.m
vehicle.wheel1.Vy
vehicle.wheel1.vx
vehicle.wheel1.vy
vehicle.wheel1.omega
vehicle.wheel1.Fxy
vehicle.wheel1.Fx
vehicle.wheel1.Fy
vehicle.wheel1.Fr
vehicle.wheel1.sxy
vehicle.wheel1.fsxy
vehicle.wheel1.sx
vehicle.wheel1.sy
vehicle.wheel2.g
vehicle.wheel2.pi
vehicle.wheel2.rw
vehicle.wheel2.c
vehicle.wheel2.mu
vehicle.wheel2.vx0
vehicle.wheel2.I_tyre
vehicle.wheel2.f_r
vehicle.wheel2.m
vehicle.wheel2.Vy
vehicle.wheel2.omega
vehicle.wheel2.Fxy
vehicle.wheel2.DeltaWheel
vehicle.wheel2.Fr
vehicle.wheel2.sxy
vehicle.wheel2.fsxy
vehicle.wheel2.sx
vehicle.wheel2.sy
vehicle.swa
vehicle.theta
vehicle.ax_sim
vehicle.ax
vehicle.decl
vehicle.ay
vehicle.delta
pi
swdamp

double initialValue(87,6)
 -2 9.8066499999999994E+000  0  0  6  256   # vehicle.chassis.g
 -1    2194                  0  0  1  280   # vehicle.chassis.m
 -1 1.4099999999999999E+000  0  0  1  280   # vehicle.chassis.a
 -1 1.5760000000000001E+000  0  0  1  280   # vehicle.chassis.b
 -1    4770                  0  0  1  280   # vehicle.chassis.Izz
 -1      16                  0  0  1  280   # vehicle.chassis.i_s
 -1       1                  0  0  1  280   # vehicle.chassis.Iw
 -1 3.1250000000000000E-001  0  0  1  280   # vehicle.chassis.rw
 -2 1.1579852645679841E+003  0  0  6  256   # vehicle.chassis.m_f
 -2 1.0360147354320161E+003  0  0  6  256   # vehicle.chassis.m_r
 -2 1.1355956194775621E+004  0  0  6  256   # vehicle.chassis.Fzf
 -2 1.0159833905224379E+004  0  0  6  256   # vehicle.chassis.Fzr
 -1      10                  0  0  1  280   # vehicle.chassis.vx0
 -1 1.2250000000000001E+000  0  0  1  280   # vehicle.chassis.rho
 -1 2.9999999999999999E-001  0  0  1  280   # vehicle.chassis.Cd
 -1 2.7799999999999998E+000  0  0  1  280   # vehicle.chassis.ac
 -1 9.0000000000000002E-001  0  0  1  280   # vehicle.chassis.mu
 -2 -4.8762492877800920E-002  0  0  2  280   # vehicle.chassis.vy
 -2 -5.2818101003992979E-009  0  0  3  256   # vehicle.chassis.der(vy)
 -2 7.7819241713307417E+000  0  0  2  280   # vehicle.chassis.yaw_angle
 -2 3.1355694210118745E-001  0  0  3  256   # vehicle.chassis.der(yaw_angle)
 -2 3.1355694210118745E-001  0  0  2  280   # vehicle.chassis.yaw_velocity
 -2 3.6531751860710214E-010  0  0  3  256   # vehicle.chassis.der(yaw_velocity)
 -2 3.3545860232041875E+001  0  0  6  256   # vehicle.chassis.Fx
 -2 -9.3768562215156663E+001  0  0  6  256   # vehicle.chassis.Fxf
 -2 3.2387980275242680E+003  0  0  6  256   # vehicle.chassis.Fyr
 -2 1.7809237338688408E+002  0  0  6  256   # vehicle.chassis.Fxr
 -2 -5.0777950939685539E+001  0  0  6  256   # vehicle.chassis.Fd
 -2       0                  0  0  6  256   # vehicle.chassis.Fg
 -2      32                  0  0  6  256   # vehicle.chassis.womega
 -2       0                  0  0  6  256   # vehicle.chassis.theta
 -2 -4.8908114818071412E-003  0  0  6  256   # vehicle.chassis.beta
 -2 9.9701459069432321E+000  0  0  2  272   # vehicle.chassis.vx
 -2 -3.6563781863341305E-010  0  0  3  256   # vehicle.chassis.der(vx)
 -2 2.8353138184817993E+002  0  0  2  280   # vehicle.chassis.x
 -2 7.6643782205608246E-001  0  0  3  256   # vehicle.chassis.der(x)
 -2 2.9488172750341541E+001  0  0  2  280   # vehicle.chassis.y
 -2 9.9407625588468029E+000  0  0  3  256   # vehicle.chassis.der(y)
 -2 3.6201033284544760E+003  0  0  6  256   # vehicle.chassis.Fyf
 -2 9.8066499999999994E+000  0  0  6  256   # vehicle.wheel1.g
 -2 3.1415926535897931E+000  0  0  6  256   # vehicle.wheel1.pi
 -1 3.1250000000000000E-001  0  0  1  280   # vehicle.wheel1.rw
 -1      18                  0  0  1  280   # vehicle.wheel1.c
 -1 9.0000000000000002E-001  0  0  1  280   # vehicle.wheel1.mu
 -2      10                  0  0  6  256   # vehicle.wheel1.vx0
 -1       1                  0  0  1  280   # vehicle.wheel1.I_tyre
 -1 7.5000000000000002E-004  0  0  1  280   # vehicle.wheel1.f_r
 -2 1.1579852645679841E+003  0  0  6  256   # vehicle.wheel1.m
 -2 3.9335279548487334E-001  0  0  6  256   # vehicle.wheel1.Vy
 -2 9.9631866997308354E+000  0  0  6  256   # vehicle.wheel1.vx
 -2 -5.4170712913824803E-001  0  0  6  256   # vehicle.wheel1.vy
 -2      32                  0  0  6  256   # vehicle.wheel1.omega
 -2 3.6213175298428432E+003  0  0  6  256   # vehicle.wheel1.Fxy
 -2 2.4553096487330694E+002  0  0  6  256   # vehicle.wheel1.Fx
 -2 3.6129842508977886E+003  0  0  6  256   # vehicle.wheel1.Fy
 -2 8.5169671460817167E+000  0  0  6  256   # vehicle.wheel1.Fr
 -2 5.4295656625176769E-002  0  0  6  256   # vehicle.wheel1.sxy
 -2 3.5432385219317314E-001  0  0  6  256   # vehicle.wheel1.fsxy
 -2 3.6813300269164630E-003  0  0  6  256   # vehicle.wheel1.sx
 -2 -5.4170712913824803E-002  0  0  6  256   # vehicle.wheel1.sy
 -2 9.8066499999999994E+000  0  0  6  256   # vehicle.wheel2.g
 -2 3.1415926535897931E+000  0  0  6  256   # vehicle.wheel2.pi
 -1 3.1250000000000000E-001  0  0  1  280   # vehicle.wheel2.rw
 -1      18                  0  0  1  280   # vehicle.wheel2.c
 -1 9.0000000000000002E-001  0  0  1  280   # vehicle.wheel2.mu
 -2      10                  0  0  6  256   # vehicle.wheel2.vx0
 -1       1                  0  0  1  280   # vehicle.wheel2.I_tyre
 -1 7.5000000000000002E-004  0  0  1  280   # vehicle.wheel2.f_r
 -2 1.0360147354320161E+003  0  0  6  256   # vehicle.wheel2.m
 -2 -5.4292823362927234E-001  0  0  6  256   # vehicle.wheel2.Vy
 -2      32                  0  0  6  256   # vehicle.wheel2.omega
 -2 3.2436907307192014E+003  0  0  6  256   # vehicle.wheel2.Fxy
 -2       0                  0  0  6  256   # vehicle.wheel2.DeltaWheel
 -2 7.6198754289182853E+000  0  0  6  256   # vehicle.wheel2.Fr
 -2 5.4374841033702700E-002  0  0  6  256   # vehicle.wheel2.sxy
 -2 3.5474013114101466E-001  0  0  6  256   # vehicle.wheel2.fsxy
 -2 2.9854093056767895E-003  0  0  6  256   # vehicle.wheel2.sx
 -2 -5.4292823362927234E-002  0  0  6  256   # vehicle.wheel2.sy
 -2 1.5000000000000000E+000  0  0  6  320   # vehicle.swa
 -2       0                  0  0  6  256   # vehicle.theta
 -2 1.5289817790356370E-002  0  0  6  256   # vehicle.ax_sim
 -2 1.5289817790356370E-002  0  0  6  256   # vehicle.ax
 -2       0                  0  0  6  256   # vehicle.decl
 -2 3.1262084576019800E+000  0  0  6  256   # vehicle.ay
 -2 9.3750000000000000E-002  0  0  6  320   # vehicle.delta
 -2 3.1415926535897931E+000  0  0  6  256   # pi
 -2 1.9198621771937625E+000  0  0  6  256   # swdamp


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(87,44)

[kg]
[m]
[m]
[m2.kg]



[kg]
[kg]
[N]
[N]
[m/s]
air density
Coefficient of drag
Frontal area
Road fricition
Vehicle Lateral Velocity [m/sec] [m/s]
der(Vehicle Lateral Velocity [m/sec]) [m/s2]
[1]
[s-1]
[s-1]
[s-2]
[N]
[N]
[N]
[N]
[N]




Vehicle longitudinal velocity [m/s]
der(Vehicle longitudinal velocity) [m/s2]




[N]


Radius of wheel [m/rad]


[m/s]

Rolling resistance coefficient
[kg]
Chassis lat velocity [m/s]
wheel lon velocity [m/s]
wheel lat velcoity [m/s]
wheel angular velocity [rad/s]
Tire Force combined [N]
[N]
[N]
[N]
combined slip
tire coefficient
longitudinal slip [1]
Lateral slip [1]


Radius of wheel [m/rad]


[m/s]

Rolling resistance coefficient
[kg]
Chassis lat velocity [m/s]
wheel angular velocity [rad/s]
Tire Force combined [N]
[rad|deg]
[N]
combined slip
tire coefficient
longitudinal slip [1]
Lateral slip [1]


[m/s2]
[m/s2]
[m/s2]
[m/s2]
[rad]

amplitude of the swd manouvre

